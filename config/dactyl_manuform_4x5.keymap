#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LWR 1
#define RSE 2
#define ADJ 3

#define HYPER(key) LS(LC(LA(LG(key))))
#define MEH(key)   LS(LC(LA(key)))

&sl { release-after-ms = <5000>; };

&kscan0 {
    debounce-press-ms = <30>;
    debounce-release-ms = <30>;
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <20 21>;
        };

        k1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <0 29>;
            layers = <1>;
        };

        n2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <2 29>;
            layers = <1>;
        };

        n3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <3 29>;
        };

        to1 {
            bindings = <&mo 4>;
            key-positions = <28 29>;
            layers = <1>;
        };

        t3-2 {
            bindings = <&kp NUMBER_3>;
            key-positions = <29 2>;
            layers = <1>;
        };

        evkey {
            bindings = <&kp LC(Y)>;
            key-positions = <34 35>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <13 14>;
        };

        cuts {
            bindings = <&kp LC(X)>;
            key-positions = <22 23>;
        };

        forward {
            bindings = <&kp LC(TAB)>;
            key-positions = <5 6>;
        };

        backward {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <15 16>;
        };

        tabalt {
            bindings = <&kp LC(Z)>;
            key-positions = <30 31>;
        };

        screensh {
            bindings = <&kp LG(LS(S))>;
            key-positions = <7 6 8 9>;
        };

        z {
            bindings = <&kp LC(Z)>;
            key-positions = <32 33>;
        };

        ev {
            bindings = <&kp LA(Z)>;
            key-positions = <30 31>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        ht: ht {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &htmo MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &htmo MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "HT";
        };
    };

    behaviors {
        as_ht: as_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_HT";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        htmo: htmo {
            compatible = "zmk,behavior-hold-tap";
            label = "HTMO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&as Q  &as W  &as E  &as R           &as T            &as Y          &as U           &as I  &as O      &as P
&as A  &as S  &as D  &as F           &as G            &as H          &as J           &as K  &as L      &kp BACKSPACE
       &as X  &as C  &as V           &as B            &as N          &as M           &as Z  &kp ENTER
                     &kp LEFT_SHIFT  &htmo 2 SPACE    &htmo 4 SPACE  &mo 2
                     &kp LCTRL       &kp LEFT_ALT     &kp TAB        &htmo 3 ESCAPE
            >;
        };

        gaming {
            bindings = <
&kp Q  &kp W  &kp E  &kp R           &kp T           &kp Y          &kp U  &kp I  &kp O    &kp P
&kp A  &kp S  &kp D  &kp F           &kp G           &kp H          &kp J  &kp K  &kp L    &kp BACKSPACE
       &kp X  &kp C  &kp V           &kp B           &kp N          &kp M  &kp Z  &kp TAB
                     &kp LEFT_SHIFT  &kp SPACE       &htmo 4 SPACE  &mo 2
                     &kp LCTRL       &kp LEFT_ALT    &kp ENTER      &mo 3
            >;
        };

        number-navigate {
            bindings = <
&as NUMBER_1  &as NUMBER_2    &as NUMBER_3  &as NUMBER_4  &as N5       &as NUMBER_6    &as N7          &as N8  &as N9     &as N0
&kp DELETE    &kp LEFT_ARROW  &kp DOWN      &kp UP_ARROW  &kp RIGHT    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP  &kp RIGHT  &kp BACKSPACE
              &trans          &trans        &trans        &trans       &trans          &trans          &trans  &trans
                                            &mo 3         &trans       &kp LEFT_SHIFT  &trans
                                            &trans        &trans       &trans          &trans
            >;
        };

        control {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4          &kp F5          &kp F6  &kp F7  &kp F8  &kp F9   &kp F10
&kp LEFT_SHIFT  &out OUT_USB  &out OUT_BLE  &kp K_SLEEP     &trans          &trans  &trans  &trans  &kp F11  &kp F12
                &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &to 0   &to 1   &trans  &trans
                                            &kp LEFT_SHIFT  &trans          &trans  &trans
                                            &trans          &trans          &trans  &trans
            >;
        };

        symbol {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH              &kp DOLLAR     &kp PERCENT     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &as MINUS         &as EQUAL          &kp DELETE
&none            &none        &kp CARET             &kp AMPERSAND  &kp ASTERISK    &as SEMICOLON         &as SQT                &as LEFT_BRACKET  &as RIGHT_BRACKET  &as SLASH
                 &as GRAVE    &as NON_US_BACKSLASH  &trans         &trans          &trans                &trans                 &as COMMA         &as PERIOD
                                                    &trans         &trans          &trans                &kp LEFT_SHIFT
                                                    &trans         &trans          &trans                &trans
            >;
        };
    };
};
